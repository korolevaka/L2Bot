from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters.state import StateFilter
from aiogram.filters import CommandStart
from sqlalchemy import func
import asyncio

from database import Session, Parent, Grades
import keyboards as kb
import config
from states import Authentication, AddParent, AddGrades, TeacherCode, GetGrades

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(CommandStart())
async def cmd_start(message: Message):
   await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞!üè´\n–í—ã üëî—É—á–∏—Ç–µ–ª—å –∏–ª–∏ üë®‚Äçüë©‚Äçüë¶—Ä–æ–¥–∏—Ç–µ–ª—å?", reply_markup=kb.main)

@dp.message(lambda message: message.text == "–£—á–∏—Ç–µ–ª—å")
async def cmd_code(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∏—Ç–µ–ª—èü§´")
    await state.set_state(TeacherCode.waiting_code)

@dp.message(StateFilter(TeacherCode.waiting_code))
async def process_code(message: Message, state: FSMContext):
    if message.text == config.TEACHER_CODE:
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?‚úçüèª", reply_markup=kb.teacher)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∫–æ–¥ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
    else:
        await message.answer("‚úñÔ∏è–ö–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è")
async def add_parent_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è:")
    await state.set_state(AddParent.waiting_for_parent_name)

@dp.message(StateFilter(AddParent.waiting_for_parent_name))
async def process_parent_name(message: Message, state: FSMContext):
    await state.update_data(parent_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(AddParent.waiting_for_student_name)

@dp.message(StateFilter(AddParent.waiting_for_student_name))
async def process_student_name(message: Message, state: FSMContext):
    await state.update_data(student_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AddParent.waiting_for_password)


@dp.message(StateFilter(AddParent.waiting_for_password))
async def process_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    session = Session()
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏–∑ –±–∞–∑—ã
    last_id = session.query(func.max(Parent.id)).scalar()
    if last_id is None:
        new_id = 1
    else:
        new_id = last_id + 1
    new_parent = Parent(
        id=new_id,
        parent_name=data.get("parent_name"),
        student_name=data.get("student_name"),
        password=data.get("password"),
    )
    session.add(new_parent)
    session.commit()
    session.close()
    await message.answer(f"–†–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:'{new_id}'", reply_markup=kb.teacher)
    await state.clear()

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏")
async def add_grades_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ä–æ–¥–∏—Ç–µ–ª—è:")
    await state.set_state(AddGrades.waiting_for_parent_id)

@dp.message(StateFilter(AddGrades.waiting_for_parent_id))
async def process_parent_id(message: Message, state: FSMContext):
    try:
        parent_id = int(message.text)
        await state.update_data(parent_id=parent_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:")
        await state.set_state(AddGrades.waiting_for_math)
    except ValueError:
        await message.answer("‚úñÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–¥–∏—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.message(StateFilter(AddGrades.waiting_for_math))
async def process_math(message: Message, state: FSMContext):
    try:
        math = int(message.text)
        await state.update_data(math=math)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É:")
        await state.set_state(AddGrades.waiting_for_russian)
    except ValueError:
        await message.answer("‚úñÔ∏è–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(StateFilter(AddGrades.waiting_for_russian))
async def process_russian(message: Message, state: FSMContext):
    try:
        russian = int(message.text)
        await state.update_data(russian=russian)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏:")
        await state.set_state(AddGrades.waiting_for_history)
    except ValueError:
        await message.answer("‚úñÔ∏è–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(StateFilter(AddGrades.waiting_for_history))
async def process_history(message: Message, state: FSMContext):
    try:
        history = int(message.text)
        await state.update_data(history=history)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:")
        await state.set_state(AddGrades.waiting_for_literature)
    except ValueError:
        await message.answer("‚úñÔ∏è–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(StateFilter(AddGrades.waiting_for_literature))
async def process_literature(message: Message, state: FSMContext):
    try:
        literature = int(message.text)
        await state.update_data(literature=literature)
        data = await state.get_data()

        session = Session()
        new_grades = Grades(
            parent_id=data.get("parent_id"),
            math=data.get("math"),
            russian=data.get("russian"),
            history=data.get("history"),
            literature=data.get("literature"),
        )
        session.add(new_grades)
        session.commit()
        session.close()
        await message.answer("–û—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=kb.teacher)
        await state.clear()
    except ValueError:
        await message.answer("‚úñÔ∏è–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(lambda message: message.text == "–†–æ–¥–∏—Ç–µ–ª—å")
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëãüèª\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(Authentication.waiting_for_parent_name)

@dp.message(StateFilter(Authentication.waiting_for_parent_name))
async def process_parent_name(message: Message, state: FSMContext):
    parent_name = message.text
    session = Session()
    result = session.query(Parent).filter_by(parent_name=parent_name).first()
    if result:
        await state.update_data(parent_name=parent_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞:")
        await state.set_state(Authentication.waiting_for_student_name)
    else:
        await message.answer("‚úñÔ∏è–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(StateFilter(Authentication.waiting_for_student_name))
async def process_student_name(message: Message, state: FSMContext):
    student_name = message.text
    session = Session()
    result = session.query(Parent).filter_by(student_name=student_name).first()
    if result:
        await state.update_data(student_name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(Authentication.waiting_for_password)
    else:
        await message.answer("‚úñÔ∏è–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ")

@dp.message(StateFilter(Authentication.waiting_for_password))
async def process_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    parent_name = data.get("parent_name")
    student_name = data.get("student_name")
    password = message.text
    session = Session()
    result = session.query(Parent).filter_by(parent_name=parent_name, student_name=student_name, password=password).first()
    if result:
        await message.answer("–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–ΩüèÜ\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb.subjects)
        await state.set_state(GetGrades.waiting_for_subject)  # <-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    else:
        await message.answer("‚úñÔ∏è–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ")


@dp.message(StateFilter(GetGrades.waiting_for_subject))
async def get_grades(message: Message, state: FSMContext):
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–æ–∫.")
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ üëî—É—á–∏—Ç–µ–ª—å –∏–ª–∏ üë®‚Äçüë©‚Äçüë¶—Ä–æ–¥–∏—Ç–µ–ª—å?", reply_markup=kb.main)
        return
    data = await state.get_data()
    parent_name = data.get("parent_name")
    student_name = data.get("student_name")

    session = Session()
    parent = session.query(Parent).filter_by(parent_name=parent_name, student_name=student_name).first()
    grades = session.query(Grades).filter_by(parent_id=parent.id).first()

    subject = message.text.lower()
    subject_field = {
        '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'math',
        '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫': 'russian',
        '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'literature',
        '–∏—Å—Ç–æ—Ä–∏—è': 'history'
    }.get(subject)

    if subject_field and hasattr(grades, subject_field):
        grade = getattr(grades, subject_field)
        await message.answer(f"–û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {message.text}: {grade}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=kb.subjects)
    else:
        await message.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=kb.subjects)

@dp.message(lambda message: message.text == "–í—ã—Ö–æ–¥")
async def exit(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ üëî—É—á–∏—Ç–µ–ª—å –∏–ª–∏ üë®‚Äçüë©‚Äçüë¶—Ä–æ–¥–∏—Ç–µ–ª—å?", reply_markup=kb.main)
